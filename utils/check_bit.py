
import os
from PIL import Image
import cv2
import numpy as np
from scipy.signal import convolve2d

def check_bit_message(message,previous_text_length,num):
    current_length = len(''.join(format(byte, '08b') for byte in message.encode('utf-8')))

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    if current_length == 0 and previous_text_length > 0:
        num += previous_text_length  # ‡πÄ‡∏û‡∏¥‡πà‡∏° num ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
    elif current_length > previous_text_length:
        num -= (current_length - previous_text_length)  # ‡∏•‡∏î num ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
    elif current_length < previous_text_length:
        num += (previous_text_length - current_length)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° num ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
        

    if num < 0:
        setText=f"bit ‡πÄ‡∏Å‡∏¥‡∏ô {abs(num)}"
        setStyleSheet ="color: red; font-weight: bold; font-size: 34px; background-color: transparent;"
    else:
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡πÑ‡∏î‡πâ
        setText=f"bit ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {abs(num)}"
        setStyleSheet ="color: green; font-weight: bold; font-size: 34px; background-color: transparent;"

    return num,setText,setStyleSheet,current_length


def check_bit_palette2(image_path):
    temp_png_path = "temp_image.png"
    img = Image.open(image_path)
    img.convert("RGB").save(temp_png_path, format="PNG")

    try:
        img_p = Image.open(temp_png_path).convert("P")
        palette = img_p.getpalette()
        print(f"check_bit_palette ==> Palette size: {len(palette)}, Colors: {len(palette)//3}")
    finally:
        if os.path.exists(temp_png_path):
            os.remove(temp_png_path)
    return len(palette) - 16


def check_bit_palette(image_path, show_lsb=False):
    img = Image.open(image_path)
    print(f"Image mode: {img.mode}")
    if img.mode != "P":
        return 0
    palette = img.getpalette()
    num_colors = len(palette) // 3
    print(f"Palette size: {len(palette)}, Colors: {num_colors}")

    if show_lsb:
        lsb_list = [p & 1 for p in palette[:64]]
    return len(palette)-16


def check_bit_lsb(image_path):
    img = Image.open(image_path).convert('RGB')
    arr = np.array(img)
    height, width, channels = arr.shape
    max_bits = height * width * channels
    return max_bits - 16






def check_bit_edge_detection(image_path):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• edge ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PNG, BMP, TIFF)"""
    ext = image_path.split('.')[-1].lower()
    if ext not in ['png', 'bmp', 'tiff', 'tif']:
        return 0

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ PIL
    img = Image.open(image_path)
    
    # ‡πÅ‡∏¢‡∏Å alpha ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if img.mode == 'RGBA':
        alpha = img.split()[-1]
        img = img.convert('RGB')
    else:
        alpha = None

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô NumPy array
    img_array = np.array(img)
    if img_array.ndim == 2:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô grayscale
        img_array = np.stack([img_array]*3, axis=-1)
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô grayscale ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö edge detection
    gray_img = img.convert('L')
    gray_array = np.array(gray_img)

    # Sobel edge detection
    sobel_x = np.array([[-1,0,1],[-2,0,2],[-1,0,1]])
    sobel_y = np.array([[-1,-2,-1],[0,0,0],[1,2,1]])
    grad_x = np.abs(convolve2d(gray_array, sobel_x, mode='same'))
    grad_y = np.abs(convolve2d(gray_array, sobel_y, mode='same'))
    edges = np.sqrt(grad_x**2 + grad_y**2)
    
    threshold = 30
    edges_binary = edges > threshold
    edge_pixels = np.count_nonzero(edges_binary)

    # ‡∏•‡∏ö margin ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    usable_edge_pixels = max(edge_pixels - 64, 0)

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
    if ext in ['tiff', 'tif']:
        usable_edge_pixels = int(usable_edge_pixels * 0.08)
    elif ext == 'png':
        usable_edge_pixels = int(usable_edge_pixels * 0.03)
    elif ext == 'bmp':
        usable_edge_pixels = int(usable_edge_pixels * 0.0022)

    print(f"üñºÔ∏è Shape ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û: {img_array.shape}")
    print(f"üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô edge pixels ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå): {usable_edge_pixels}")
    
    return usable_edge_pixels






def check_bit_alpha_channel(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_UNCHANGED)
    if img is None or img.shape[2] != 4:
        return 0
    max_bits = img.shape[0] * img.shape[1]
    print(f"üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏±‡∏á‡πÑ‡∏î‡πâ: {max_bits}")
    return max_bits-8




def check_bit_masking_filtering(image_path):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•
    ext = image_path.split('.')[-1].lower()
    if ext not in ['bmp', 'png', 'tiff']:
        return 0

    # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
    img = cv2.imread(image_path, cv2.IMREAD_COLOR)
    if img is None:
        return 0

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á edge mask ‡∏à‡∏≤‡∏Å grayscale
    gray = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    edges = cv2.Canny(gray, 100, 200)
    edge_pixels = np.count_nonzero(edges)

    # ‡∏•‡∏ö 32 ‡∏ö‡∏¥‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö header
    safe_bits = edge_pixels - 32
    if safe_bits <= 0:
        return 0

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
    if ext == 'png':
        safe_bits = int(safe_bits * 0.2)   # 20%
    elif ext == 'bmp':
        safe_bits = int(safe_bits * 0.8)   # 80%
    elif ext == 'tiff':
        safe_bits = int(safe_bits * 0.6)   # 60%

    return safe_bits





















